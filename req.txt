Zoswa.com â€“ Website Requirements

Platform Purpose:
Zoswa.com will be a powerful platform where learners and professionals can:

Learn coding and data analysis through text-based, project-driven courses (no video).

Subscribe to complete a set number of practical projects within chosen durations.

Access professional online labs (browser-based) that simulate real coding environments without requiring local installations.

Get coding support (similar to Fiverr) for final year students, professionals, and companies.

1. Core Functionalities
1.1 User Roles

Students / Learners

Browse and subscribe to project-based courses.

Access coding labs directly from the browser.

Submit assignments/projects for review.

Clients (Companies / Students for support)

Post coding/data analysis projects that require assistance.

Hire experts through the platform.

Instructors / Mentors

Create and manage text-based project modules.

Provide feedback and review submissions.

Offer live Q&A support (chat/tickets).

Administrators

Manage users, subscriptions, and payments.

Approve/review instructor-created content.

Monitor platform analytics.

1.2 Courses & Projects

100% text-based learning with interactive coding assignments.

Each course = set of projects (tiered by difficulty: beginner, intermediate, advanced).

Students choose:

How many projects they want to complete.

Duration (e.g., 1 month, 3 months, 6 months).

Projects cover:

Web Development (HTML, CSS, JavaScript, PHP, etc.)

Data Analysis (Python, Pandas, SQL, R, etc.)

AI & Machine Learning (basic to advanced projects).

Students submit their completed work for review and grading.

1.3 Professional Labs (Browser-Based IDE)

Fully interactive coding environments (no installation required).

Cloud-based IDE simulating physical computers.

Features:

File explorer, code editor, terminal access.

Language support: Python, Java, JavaScript, PHP, SQL, R.

Auto-save, run/debugging in browser.

Sandbox environment (isolated per user).

Example integrations: JupyterHub, Code Server, Gitpod-like system.

1.4 Subscription & Payment

Subscription-based model.

Plans based on:

Number of projects.

Access duration.

Payment gateway: PayPal only.

Auto-renewal option for long-term subscriptions.

1.5 Coding Support Marketplace (like Fiverr)

Clients (students, companies) can post projects.

Freelance developers/instructors can bid or accept tasks.

Secure project delivery and approval workflow.

Payments held in escrow until project completion.

2. Technical Requirements
2.1 Backend

Laravel Framework (PHP 11+)

RESTful API for frontend.

Authentication (JWT/Passport).

Role-based access control.

Project & subscription management.

2.2 Frontend

TailwindCSS for responsive UI.

Clean, minimal, professional design.

Features:

Dashboard for learners, instructors, clients.

Subscription/payment pages.

Code lab integration (embedded iframe or full workspace).

2.3 Database

MySQL Database

User management.

Course/project storage.

Subscription/payment tracking.

Marketplace transactions.

2.4 Professional Labs

Integration of cloud-based IDEs (Dockerized environments).

Technologies:

JupyterHub for Python/data analysis.

Code Server (VS Code in browser).

MySQL playground for database practice.

3. Non-Functional Requirements

Scalability: Must support 10,000+ users concurrently.

Security:

Encrypted user data.

Secure PayPal integration.

Sandbox isolation for coding labs.

Performance:

Fast loading pages (under 2s).

Real-time execution in coding labs.

Availability: 99.9% uptime with cloud hosting (AWS/Azure).

4. Add this too

AI tutor/chat assistant for instant coding help.

Gamification (badges, leaderboards).

Certificates upon project completion.
